import tkinter as tk
from tkinter import messagebox

title = "Sistema de Livraria"

# Função chamada ao clicar no botão
def adicionar_livro():
    titulo = entrada_titulo.get()
    autor = entrada_autor.get()
    ano = entrada_ano.get()
    print(f"Livro adicionado: {titulo} - {autor} ({ano})")

# Criar a janela principal
janela = tk.Tk()
janela.title("Cadastro de Livro")
janela.geometry("350x200")

# Rótulo e entrada para Título
label_titulo = tk.Label(janela, text="Título:")
label_titulo.grid(row=0, column=0, padx=5, pady=5, sticky="e")
entrada_titulo = tk.Entry(janela, width=30)
entrada_titulo.grid(row=0, column=1, padx=5, pady=5)

# Rótulo e entrada para Autor
label_autor = tk.Label(janela, text="Autor:")
label_autor.grid(row=1, column=0, padx=5, pady=5, sticky="e")
entrada_autor = tk.Entry(janela, width=30)
entrada_autor.grid(row=1, column=1, padx=5, pady=5)

# Rótulo e entrada para Ano
label_ano = tk.Label(janela, text="Ano:")
label_ano.grid(row=2, column=0, padx=5, pady=5, sticky="e")
entrada_ano = tk.Entry(janela, width=30)
entrada_ano.grid(row=2, column=1, padx=5, pady=5)

# Botão "Adicionar livro"
botao_adicionar = tk.Button(janela, text="Adicionar livro", command=adicionar_livro)
botao_adicionar.grid(row=3, column=0, columnspan=2, pady=10)

# Iniciar o loop da interface
janela.mainloop()


import tkinter as tk
from tkinter import ttk

# Lista para armazenar os livros
catalogo_livros = []

# Função chamada ao clicar no botão
def adicionar_livro():
    titulo = entrada_titulo.get()
    autor = entrada_autor.get()
    ano = entrada_ano.get()

    if titulo and autor and ano:
        # Adiciona à lista
        catalogo_livros.append((titulo, autor, ano))

        # Insere no Treeview
        tree.insert("", "end", values=(titulo, autor, ano))

        # Limpa os campos
        entrada_titulo.delete(0, tk.END)
        entrada_autor.delete(0, tk.END)
        entrada_ano.delete(0, tk.END)

# Criar a janela principal
janela = tk.Tk()
janela.title("Cadastro de Livros")
janela.geometry("500x400")

# Rótulo e entrada para Título
label_titulo = tk.Label(janela, text="Título:")
label_titulo.grid(row=0, column=0, padx=5, pady=5, sticky="e")
entrada_titulo = tk.Entry(janela, width=40)
entrada_titulo.grid(row=0, column=1, padx=5, pady=5)

# Rótulo e entrada para Autor
label_autor = tk.Label(janela, text="Autor:")
label_autor.grid(row=1, column=0, padx=5, pady=5, sticky="e")
entrada_autor = tk.Entry(janela, width=40)
entrada_autor.grid(row=1, column=1, padx=5, pady=5)

# Rótulo e entrada para Ano
label_ano = tk.Label(janela, text="Ano:")
label_ano.grid(row=2, column=0, padx=5, pady=5, sticky="e")
entrada_ano = tk.Entry(janela, width=40)
entrada_ano.grid(row=2, column=1, padx=5, pady=5)

# Botão "Adicionar livro"
botao_adicionar = tk.Button(janela, text="Adicionar livro", command=adicionar_livro)
botao_adicionar.grid(row=3, column=0, columnspan=2, pady=10)

# Treeview para exibir os livros
tree = ttk.Treeview(janela, columns=("Título", "Autor", "Ano"), show="headings")
tree.heading("Título", text="Título")
tree.heading("Autor", text="Autor")
tree.heading("Ano", text="Ano")
tree.grid(row=4, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

# Ajustar redimensionamento da Treeview
janela.grid_rowconfigure(4, weight=1)
janela.grid_columnconfigure(1, weight=1)

# Iniciar o loop da interface
janela.mainloop()



import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

# Lista para armazenar os livros
catalogo_livros = []

# Função para atualizar o Treeview com os livros da lista
def atualizar_treeview(lista):
    tree.delete(*tree.get_children())
    for livro in lista:
        tree.insert("", "end", values=livro)

# Função para adicionar livro
def adicionar_livro():
    try:
        titulo = entrada_titulo.get()
        autor = entrada_autor.get()
        ano = entrada_ano.get()

        if not titulo or not autor or not ano:
            raise ValueError("Todos os campos devem ser preenchidos.")

        catalogo_livros.append((titulo, autor, ano))
        atualizar_treeview(catalogo_livros)

        entrada_titulo.delete(0, tk.END)
        entrada_autor.delete(0, tk.END)
        entrada_ano.delete(0, tk.END)

    except ValueError as ve:
        messagebox.showwarning("Campos vazios", str(ve))
    except Exception as e:
        messagebox.showerror("Erro inesperado", f"Ocorreu um erro: {str(e)}")

# Função de pesquisa
def pesquisar_livro():
    try:
        termo = entrada_pesquisa.get().lower()
        resultados = [livro for livro in catalogo_livros if termo in livro[0].lower() or termo in livro[1].lower()]
        atualizar_treeview(resultados)
    except Exception as e:
        messagebox.showerror("Erro na pesquisa", f"Ocorreu um erro: {str(e)}")

# Funções de classificação
def classificar_por_titulo():
    try:
        catalogo_livros.sort(key=lambda x: x[0].lower())
        atualizar_treeview(catalogo_livros)
    except Exception as e:
        messagebox.showerror("Erro na classificação", f"Ocorreu um erro: {str(e)}")

def classificar_por_autor():
    try:
        catalogo_livros.sort(key=lambda x: x[1].lower())
        atualizar_treeview(catalogo_livros)
    except Exception as e:
        messagebox.showerror("Erro na classificação", f"Ocorreu um erro: {str(e)}")

# Função para remover livro
def remover_livro():
    try:
        selecionado = tree.selection()
        if not selecionado:
            raise ValueError("Nenhum livro selecionado.")

        valores = tree.item(selecionado)["values"]
        catalogo_livros.remove(tuple(valores))
        tree.delete(selecionado)

    except ValueError as ve:
        messagebox.showerror("Erro", str(ve))
    except Exception as e:
        messagebox.showerror("Erro inesperado", f"Ocorreu um erro: {str(e)}")

# Criar a janela principal
janela = tk.Tk()
janela.title("Gerenciador de Livros")
janela.geometry("600x550")

# Entradas de dados
tk.Label(janela, text="Título:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
entrada_titulo = tk.Entry(janela, width=40)
entrada_titulo.grid(row=0, column=1, padx=5, pady=5)

tk.Label(janela, text="Autor:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
entrada_autor = tk.Entry(janela, width=40)
entrada_autor.grid(row=1, column=1, padx=5, pady=5)

tk.Label(janela, text="Ano:").grid(row=2, column=0, padx=5, pady=5, sticky="e")
entrada_ano = tk.Entry(janela, width=40)
entrada_ano.grid(row=2, column=1, padx=5, pady=5)

# Botão adicionar
tk.Button(janela, text="Adicionar livro", command=adicionar_livro).grid(row=3, column=0, columnspan=2, pady=10)

# Campo de pesquisa
tk.Label(janela, text="Pesquisar:").grid(row=4, column=0, padx=5, pady=5, sticky="e")
entrada_pesquisa = tk.Entry(janela, width=30)
entrada_pesquisa.grid(row=4, column=1, padx=5, pady=5, sticky="w")
tk.Button(janela, text="Pesquisar", command=pesquisar_livro).grid(row=4, column=1, padx=5, pady=5, sticky="e")

# Botões de classificação
tk.Button(janela, text="Classificar por título", command=classificar_por_titulo).grid(row=5, column=0, padx=5, pady=5)
tk.Button(janela, text="Classificar por autor", command=classificar_por_autor).grid(row=5, column=1, padx=5, pady=5, sticky="w")

# Treeview
tree = ttk.Treeview(janela, columns=("Título", "Autor", "Ano"), show="headings")
tree.heading("Título", text="Título")
tree.heading("Autor", text="Autor")
tree.heading("Ano", text="Ano")
tree.grid(row=6, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

# Botão remover
tk.Button(janela, text="Remover livro", command=remover_livro).grid(row=7, column=0, columnspan=2, pady=10)

# Ajustar redimensionamento
janela.grid_rowconfigure(6, weight=1)
janela.grid_columnconfigure(1, weight=1)



"""sistema melhorado"""



import tkinter as tk
from tkinter import ttk
import random
from tkinter import messagebox
 
catalogo = []
contador_id = 1
 
def limpar_placeholder(event, entry, placeholder_text):
    if entry.get() == placeholder_text:
        entry.delete(0, tk.END)
        entry.config(fg="black")
 
def mostrar_erro_entry(entry, mensagem):
    entry.delete(0, tk.END)
    entry.insert(0, mensagem)
    entry.config(fg="red")
 
def validar_e_adicionar_livro():
    global contador_id
 
    titulo = entry_titulo.get().strip()
    autor = entry_autor.get().strip()
    ano = entry_ano.get().strip()
    genero = entry_genero.get().strip()
 
    # Validar campos
    if not titulo:
        mostrar_erro_entry(entry_titulo, "Preencha o título")
        return
    if not autor:
        mostrar_erro_entry(entry_autor, "Preencha o autor")
        return
    if not ano:
        mostrar_erro_entry(entry_ano, "Preencha o ano")
        return
    if not ano.isdigit() or not (1000 <= int(ano) <= 2025):
        mostrar_erro_entry(entry_ano, "Ano inválido (1000-2025)")
        return
    if not genero:
        mostrar_erro_entry(entry_genero, "Escolha um gênero")
        return
 
    # Verificar duplicidade
    for livro in catalogo:
        if livro["titulo"].lower() == titulo.lower() and livro["autor"].lower() == autor.lower():
            mostrar_erro_entry(entry_titulo, "Livro já existe")
            return
 
    novo_livro = {"ID": contador_id, "titulo": titulo, "autor": autor, "ano": ano, "genero": genero}
    catalogo.append(novo_livro)
    contador_id += 1
    atualizar_treeview(catalogo)
 
    # Limpar campos
    entry_titulo.delete(0, tk.END)
    entry_autor.delete(0, tk.END)
    entry_ano.delete(0, tk.END)
    entry_genero.set("")
 
    # Resetar cor dos campos
    entry_titulo.config(fg="black")
    entry_autor.config(fg="black")
    entry_ano.config(fg="black")
 
    entry_titulo.focus_set()
 
def atualizar_treeview(lista_livros):
    treeview.delete(*treeview.get_children())
    for livro in lista_livros:
        treeview.insert("", "end", values=(livro["ID"], livro["titulo"], livro["autor"], livro["ano"], livro["genero"]))
 
def buscar_livro():
    termo_busca = entry_busca.get().lower().strip()
    resultados = []
 
    for livro in catalogo:
        if (termo_busca in livro["titulo"].lower() or
            termo_busca in livro["autor"].lower() or
            termo_busca in livro["ano"].lower() or
            termo_busca in livro["genero"].lower()):
            resultados.append(livro)
    atualizar_treeview(resultados)
 
   
def livro_aleatorio():
    if not catalogo:
        messagebox.showinfo("Livro Aleatório", "O catálogo está vazio.")
        return
 
    livro = random.choice(catalogo)
    mensagem = (
        f"📚 Livro Aleatório:\n\n"
        f"Título: {livro['titulo']}\n"
        f"Autor: {livro['autor']}\n"
        f"Ano: {livro['ano']}\n"
        f"Gênero: {livro['genero']}"
    )
    messagebox.showinfo("Livro Aleatório", mensagem)
 
 
def ordenar_livros():
    catalogo.sort(key=lambda livro: livro["autor"].lower())
    atualizar_treeview(catalogo)
 
def remover_livro():
    item_selecionado = treeview.selection()
    if not item_selecionado:
        return
   
    livro_valores = treeview.item(item_selecionado, "values")
    id_selecionado = int(livro_valores[0])
 
    for livro in catalogo:
        if livro["ID"] == id_selecionado:
            catalogo.remove(livro)
            atualizar_treeview(catalogo)
            return
 
# --- Interface Gráfica ---
janela = tk.Tk()
janela.title("Sistema de Livraria")
janela.configure(bg="gray")
janela.geometry("800x600")
 
# Entradas de dados
tk.Label(janela, text="Título:").grid(row=0, column=0, padx=5, pady=5, sticky="e")
entry_titulo = tk.Entry(janela, width=30)
entry_titulo.grid(row=0, column=1, padx=5, pady=5)
entry_titulo.bind("<FocusIn>", lambda e: limpar_placeholder(e, entry_titulo, "Preencha o título"))
 
tk.Label(janela, text="Autor:").grid(row=1, column=0, padx=5, pady=5, sticky="e")
entry_autor = tk.Entry(janela, width=30)
entry_autor.grid(row=1, column=1, padx=5, pady=5)
entry_autor.bind("<FocusIn>", lambda e: limpar_placeholder(e, entry_autor, "Preencha o autor"))
 
tk.Label(janela, text="Ano:").grid(row=2, column=0, padx=5, pady=5, sticky="e")
entry_ano = tk.Entry(janela, width=30)
entry_ano.grid(row=2, column=1, padx=5, pady=5)
entry_ano.bind("<FocusIn>", lambda e: limpar_placeholder(e, entry_ano, "Preencha o ano"))
entry_ano.bind("<FocusIn>", lambda e: limpar_placeholder(e, entry_ano, "Ano inválido (1000-2025)"))
 
tk.Label(janela, text="Gênero:").grid(row=3, column=0, padx=5, pady=5, sticky="e")
entry_genero_var = tk.StringVar()
entry_genero = ttk.Combobox(janela, textvariable=entry_genero_var,
                            values=["Ação", "Suspense", "Terror", "Romance", "Ficção", "Outro"], state="readonly")
entry_genero.grid(row=3, column=1, sticky=tk.W, pady=5, padx=5)
 
botao_adicionar = tk.Button(janela, text="Adicionar Livro", command=validar_e_adicionar_livro)
botao_adicionar.grid(row=2, column=2, padx=5, pady=10)
 
# Busca e ações
tk.Label(janela, text="Buscar:").grid(row=0, column=2, padx=10, pady=5, sticky="e")
entry_busca = tk.Entry(janela, width=30)
entry_busca.grid(row=0, column=3, padx=5, pady=5)
 
botao_buscar = tk.Button(janela, text="Buscar Livro", command=buscar_livro)
botao_buscar.grid(row=1, column=3, padx=5, pady=5)
 
botao_ordenar = tk.Button(janela, text="Ordenar por Autor", command=ordenar_livros)
botao_ordenar.grid(row=2, column=3, padx=5, pady=5)
 
botao_remover = tk.Button(janela, text="Remover Livro", command=remover_livro)
botao_remover.grid(row=3, column=3, padx=5, pady=5)
 
botao_livro_aleatorio = tk.Button(janela, text="Livro Aleatório", command=livro_aleatorio)
botao_livro_aleatorio.grid(row=3, column=2, padx=5, pady=5)
 
 
# Tabela de livros
colunas = ("ID", "titulo", "autor", "ano", "gênero")
treeview = ttk.Treeview(janela, columns=colunas, show="headings")
treeview.heading("ID", text="ID")
treeview.heading("titulo", text="Título")
treeview.heading("autor", text="Autor")
treeview.heading("ano", text="Ano")
treeview.heading("gênero", text="Gênero")
treeview.column("ID", width=25)
treeview.column("titulo", width=250)
treeview.column("autor", width=150)
treeview.column("ano", width=80)
treeview.column("gênero", width=100)
treeview.grid(row=4, column=0, columnspan=4, padx=10, pady=10, sticky="nsew")
 
# Redimensionamento
janela.grid_rowconfigure(4, weight=1)
janela.grid_columnconfigure(1, weight=1)
janela.grid_columnconfigure(3, weight=1)
 
janela.mainloop()
 
 

# Iniciar o loop da interface
janela.mainloop()
